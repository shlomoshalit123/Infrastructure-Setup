pipeline {
    environment {
        AWS_DEFAULT_REGION='eu-north-1'
        NAME="shlomishalitkops.k8s.local"
        KOPS_STATE_BUCKET_NAME="shlomishalit-kops-state-store"
        KOPS_OIDC_BUCKET_NAME="shlomishalit-kops-oidc-store"
        KOPS_STATE_STORE="s3://${KOPS_STATE_BUCKET_NAME}"
        CONTROL_PLANE_COUINT=1
        NODE_COUNT=2
        ZONE="eu-north-1a"
        NODE_SIZE="t3.xlarge"
        AMI="ami-0ad8f0f72fd4dc1ac"
        NODES_SSH_CERT_PATH='/home/sshalit/certs/shlomi-final-project.pem'
        NEXUS_SERVER="13.50.194.17:5000"
    }

    agent {
        label 'ubuntu'
    }
    
    parameters {
        choice(name: 'ACTION', choices: ['ShowCluster', 'DeployCluster', 'RemoveCluster'], description: 'Select action:')
    }

    stages {
        stage('checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'deploy']], userRemoteConfigs: [[url: 'https://github.com/shlomoshalit123/Infrastructure-Setup.git']])
            }
        }
        stage('Create S3 Buckets') {
            when {equals expected: "DeployCluster", actual: "${params.ACTION}" }
            steps {
                withCredentials([usernamePassword(credentialsId: 'AWS-Credentials-IAM', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    sh '''
                    aws s3api create-bucket --bucket ${KOPS_STATE_BUCKET_NAME} --region ${AWS_DEFAULT_REGION} --create-bucket-configuration LocationConstraint=${AWS_DEFAULT_REGION}
                    aws s3api create-bucket --bucket ${KOPS_OIDC_BUCKET_NAME} --region ${AWS_DEFAULT_REGION} --object-ownership BucketOwnerPreferred --create-bucket-configuration LocationConstraint=${AWS_DEFAULT_REGION}
                    aws s3api put-public-access-block --bucket ${KOPS_OIDC_BUCKET_NAME} --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false
                    aws s3api put-bucket-acl --bucket ${KOPS_OIDC_BUCKET_NAME} --acl public-read 
                    aws s3api put-bucket-versioning --bucket ${KOPS_STATE_BUCKET_NAME}  --versioning-configuration Status=Enabled
                    aws s3api put-bucket-encryption --bucket ${KOPS_STATE_BUCKET_NAME} --server-side-encryption-configuration \'{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}\'
                    '''
                }
                archiveArtifacts artifacts: "config", followSymlinks: false
            }
        }
        stage('Build K8S with KOPS') {
            when {equals expected: "DeployCluster", actual: "${params.ACTION}" }
            steps {
                withCredentials([usernamePassword(credentialsId: 'AWS-Credentials-IAM', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    sh '''
                    kops create cluster \
                        --name=${NAME} \
                        --cloud=aws \
                        --zones=${ZONE} \
                        --control-plane-count ${CONTROL_PLANE_COUINT} \
                        --node-count ${NODE_COUNT} \
                        --node-size ${NODE_SIZE} \
                        --discovery-store=s3://${KOPS_OIDC_BUCKET_NAME}/${NAME}/discovery \
                        --state s3://${KOPS_STATE_BUCKET_NAME} \
                        --image ${AMI}  
                    kops update cluster --name ${NAME} --state s3://${KOPS_STATE_BUCKET_NAME} --yes --admin
                    kops validate cluster --name ${NAME} --wait 10m --state s3://${KOPS_STATE_BUCKET_NAME}
                    cp ~/.kube/config .
                    '''
                }
                archiveArtifacts artifacts: "config", followSymlinks: false
            }
        }
        stage('Install nginx ingress') {
            when {equals expected: "DeployCluster", actual: "${params.ACTION}" }
            steps {
                sh '''
                helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
                helm repo update
                helm install ingress-nginx ingress-nginx/ingress-nginx
                kubectl get services ingress-nginx-controller
                '''
            }
        }
        stage('Install argocd') {
            when {equals expected: "DeployCluster", actual: "${params.ACTION}" }
            steps {
                sh '''
                kubectl create namespace argocd
                kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
                kubectl get pods -n argo
                '''
            }
        }
        stage('KOPS Remove K8S') {
            when {equals expected: "RemoveCluster", actual: "${params.ACTION}" }

            steps {
                withCredentials([usernamePassword(credentialsId: 'AWS-Credentials-IAM', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    sh '''
                    kops delete cluster --name ${NAME} --state s3://${KOPS_STATE_BUCKET_NAME} --yes
                    python3 ./deploy/prod/aws-kops/delete_bucket.py ${KOPS_OIDC_BUCKET_NAME}
                    python3 ./deploy/prod/aws-kops/delete_bucket.py ${KOPS_STATE_BUCKET_NAME}
                    '''
                }
            }
        }  
        stage('Show Cluster') {
            when {equals expected: "ShowCluster", actual: "${params.ACTION}" }

            steps {
                withCredentials([usernamePassword(credentialsId: 'AWS-Credentials-IAM', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    sh '''
                    kops get all --name ${NAME} --state s3://${KOPS_STATE_BUCKET_NAME}
                    kops get clusters --name ${NAME} --state s3://${KOPS_STATE_BUCKET_NAME} -o yaml
                    echo -e "/n*************/n"
                    kubectl get pods -A
                    echo -e "/n*************/n"
                    '''
                }
            }
        }       
    }
}
