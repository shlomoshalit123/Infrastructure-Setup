pipeline {
    environment {
        NAME="shlomishalitkopstest.k8s.local"
        KOPS_STATE_BUCKET_NAME="shlomishalit-kops-state-store"
        KOPS_OIDC_BUCKET_NAME="shlomishalit-kops-oidc-store"
        KOPS_STATE_STORE="s3://${KOPS_STATE_BUCKET_NAME}"
        CONTROL_PLANE_COUINT=1
        NODE_COUNT=2
        ZONE="eu-north-1a"
        NODE_SIZE="t3.xlarge"
        AMI="ami-0ad8f0f72fd4dc1ac"
    }

    agent {
        label 'ubuntu'
    }
    
    parameters {
        choice(name: 'ACTION', choices: ['ShowCluster', 'DeployCluster', 'RemoveCluster'], description: 'Select action:')
    }

    stages {
        stage('KOPS Install K8S') {
            when {equals expected: "DeployCluster", actual: "${params.ACTION}" }
            steps {
                cleanWs()
                // checkout scmGit(branches: [[name: '*/dev']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/shlomoshalit123/react-java0mysql.git']])
                sh '''
                export AWS_ACCESS_KEY_ID=AKIAU77SCMU3L37JTHV4
                export AWS_SECRET_ACCESS_KEY=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
                export AWS_DEFAULT_REGION=eu-north-1
                kops create cluster \
                    --name=${NAME} \
                    --cloud=aws \
                    --zones=${ZONE} \
                    --control-plane-count ${CONTROL_PLANE_COUINT} \
                    --node-count ${NODE_COUNT} \
                    --node-size ${NODE_SIZE} \
                    --discovery-store=s3://${KOPS_OIDC_BUCKET_NAME}/${NAME}/discovery \
                    --state s3://${KOPS_STATE_BUCKET_NAME} \
                    --image ${AMI}
                
                kops update cluster --name ${NAME} --state s3://${KOPS_STATE_BUCKET_NAME} --yes --admin
                kops validate cluster --name ${NAME} --wait 10m --state s3://${KOPS_STATE_BUCKET_NAME}
                cp ~/.kube/config .
                '''
                archiveArtifacts artifacts: "config", followSymlinks: false
            }
        }
        stage('Install argocd') {
            when {equals expected: "DeployCluster", actual: "${params.ACTION}" }

            steps {
                sh '''kubectl create namespace argocd
                kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
                kubectl get pods -n argo'''
            }
        }
        stage('KOPS Remove K8S') {
            when {equals expected: "RemoveCluster", actual: "${params.ACTION}" }

            steps {
                cleanWs()
                sh '''
                export AWS_ACCESS_KEY_ID=AKIAU77SCMU3L37JTHV4
                export AWS_SECRET_ACCESS_KEY=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
                export AWS_DEFAULT_REGION=eu-north-1
                kops delete cluster --name ${NAME} --state s3://${KOPS_STATE_BUCKET_NAME} --yes
                '''
            }
        }  
        stage('Show Cluster') {
            when {equals expected: "ShowCluster", actual: "${params.ACTION}" }

            steps {
                sh '''
                export AWS_ACCESS_KEY_ID=AKIAU77SCMU3L37JTHV4
                export AWS_SECRET_ACCESS_KEY=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
                export AWS_DEFAULT_REGION=eu-north-1
                kops get all --name ${NAME} --state s3://${KOPS_STATE_BUCKET_NAME}
                kops get clusters --name ${NAME} --state s3://${KOPS_STATE_BUCKET_NAME} -o yaml
                echo -e "/n*************/n"
                kubectl get pods -A
                echo -e "/n*************/n"
                '''
            }
    }       
    }
}
